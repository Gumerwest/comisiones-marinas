#!/usr/bin/env python3
"""
Script para verificar la configuraci√≥n de Socket.IO
"""
import os
import sys
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def verify_socketio():
    from app import create_app, socketio
    
    print("=== VERIFICACI√ìN DE SOCKET.IO ===\n")
    
    # Verificar dependencias
    print("üì¶ DEPENDENCIAS:")
    try:
        import eventlet
        print("  ‚úÖ eventlet instalado")
        print(f"     Versi√≥n: {eventlet.__version__}")
    except ImportError:
        print("  ‚ùå eventlet NO instalado - El chat no funcionar√° en producci√≥n")
    
    try:
        import socketio as sio
        print("  ‚úÖ python-socketio instalado")
        print(f"     Versi√≥n: {sio.__version__}")
    except ImportError:
        print("  ‚ùå python-socketio NO instalado")
    
    try:
        import flask_socketio
        print("  ‚úÖ Flask-SocketIO instalado")
        print(f"     Versi√≥n: {flask_socketio.__version__}")
    except ImportError:
        print("  ‚ùå Flask-SocketIO NO instalado")
    
    # Crear aplicaci√≥n
    app = create_app()
    
    with app.app_context():
        print("\nüîß CONFIGURACI√ìN:")
        print(f"  - En Render: {'S√≠' if os.environ.get('RENDER') else 'No'}")
        print(f"  - Async Mode: {app.config.get('SOCKETIO_ASYNC_MODE', 'default')}")
        print(f"  - Transports: {app.config.get('SOCKETIO_TRANSPORTS', 'default')}")
        print(f"  - CORS: {app.config.get('SOCKETIO_CORS_ALLOWED_ORIGINS', 'default')}")
        print(f"  - Logger: {app.config.get('SOCKETIO_LOGGER', True)}")
        print(f"  - Ping Timeout: {app.config.get('SOCKETIO_PING_TIMEOUT', 60)}s")
        print(f"  - Ping Interval: {app.config.get('SOCKETIO_PING_INTERVAL', 25)}s")
        
        # Verificar handlers registrados
        print("\nüì° HANDLERS REGISTRADOS:")
        if hasattr(socketio, 'handlers'):
            for namespace in socketio.handlers:
                print(f"  Namespace: {namespace}")
                for event in socketio.handlers[namespace]:
                    print(f"    - {event}")
        else:
            print("  ‚ö†Ô∏è  No se puede verificar handlers (normal en producci√≥n)")
        
        # Verificar rutas Socket.IO
        print("\nüõ£Ô∏è  RUTAS SOCKET.IO:")
        socket_routes = []
        for rule in app.url_map.iter_rules():
            if 'socket.io' in str(rule):
                socket_routes.append(str(rule))
        
        if socket_routes:
            for route in socket_routes:
                print(f"  ‚úÖ {route}")
        else:
            print("  ‚ö†Ô∏è  No se encontraron rutas de Socket.IO expl√≠citas")
            print("     (Esto es normal, Socket.IO las maneja internamente)")
        
        # Recomendaciones
        print("\nüí° RECOMENDACIONES:")
        if os.environ.get('RENDER'):
            print("  Para Render:")
            print("  - Use solo 'polling' como transporte (m√°s estable)")
            print("  - Use 'eventlet' como async_mode")
            print("  - Mantenga workers=1 en gunicorn")
            print("  - El comando debe ser: gunicorn run:app (no --factory)")
        else:
            print("  Para desarrollo local:")
            print("  - Puede usar 'polling' y 'websocket'")
            print("  - Use 'threading' como async_mode")
            print("  - No necesita eventlet en desarrollo")
        
        # Verificar problemas comunes
        print("\n‚ö†Ô∏è  PROBLEMAS COMUNES:")
        if os.environ.get('RENDER'):
            if app.config.get('SOCKETIO_ASYNC_MODE') != 'eventlet':
                print("  ‚ùå Async mode debe ser 'eventlet' en Render")
            
            if 'websocket' in app.config.get('SOCKETIO_TRANSPORTS', []):
                print("  ‚ö†Ô∏è  WebSocket puede no funcionar bien en Render")
                print("     Recomendado: usar solo ['polling']")
        
        print("\n‚úÖ Verificaci√≥n completada")
        
        # Test de conexi√≥n simple
        print("\nüß™ TEST DE CONEXI√ìN:")
        print("  Para probar manualmente:")
        print("  1. Abra la aplicaci√≥n en el navegador")
        print("  2. Vaya a una comisi√≥n o tema")
        print("  3. Abra la consola del navegador (F12)")
        print("  4. Debe ver mensajes de conexi√≥n del chat")
        print("  5. Si ve 'Conectado al servidor de chat', est√° funcionando")

if __name__ == '__main__':
    try:
        verify_socketio()
    except Exception as e:
        print(f"‚ùå Error durante la verificaci√≥n: {str(e)}")
        import traceback
        traceback.print_exc()
